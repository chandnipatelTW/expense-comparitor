plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
}

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    integrationTest {
        java {
            srcDirs = ['src/integrationTest/java']
        }
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.test.compileClasspath
    }
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'org.projectlombok:lombok:1.16.12'
    compile 'org.unitils.jodatime:unitils-jodatime:1.0.3'
    compile 'org.apache.commons:commons-text:0.1-SNAPSHOT'

    testCompile 'junit:junit:4.12'
    testCompile 'org.springframework.boot:spring-boot:1.3.5.RELEASE'
    testCompile 'org.mockito:mockito-core:2.3.11'

    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestCompile sourceSets.test.output
    integrationTestRuntime configurations.testRuntime
}

task runLocal(dependsOn: jar, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.spargonaut.Application'
}

task integrationTest(type: Test) {
    description 'Runs the integration tests'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

idea {
    project {
        vcs = 'Git'
    }

    module {
        excludeDirs += file 'gradle'
        excludeDirs += file 'build'
        excludeDirs += file '.idea'
    }
}
